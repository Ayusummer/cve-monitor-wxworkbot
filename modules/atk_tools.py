"""
Github 红队工具仓库监控相关逻辑
"""
import rtoml
from pathlib import Path
import requests
from modules.cmdb import get_atk_tools_info, update_atk_tools_info
from modules.info_push import post_message_to_WXWork
from modules.atom_tool import add_atom_entry
from datetime import datetime, timezone

# 读取配置项信息
CONFIG = rtoml.load(Path(__file__).parent / "../config.toml")
GITHUB_TOKEN = CONFIG["github_token"]
TOOLS_LIST = CONFIG["tools_list"]
ATOM_FILE_PATH = Path(__file__).parent / f'../{CONFIG["atom_file_path"]}'


GITHUB_HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
}


class ATKTools:
    """ATKTools 类, 用于获取红队工具的信息"""

    def __init__(self) -> None:
        print("Github仓库监控类初始化中...")
        self.atom_content_html_template_commit = """<p>
    仓库:<a href="{html_url}">{tools_name}</a>有新的 commit
</p>

<p>
    更新日志: {commit_message}
</p>
"""
        self.atom_content_html_template_release = """<p>
    仓库:<a href="{download_url}">{tools_name}</a>有新的 有新的 release:{tag_name}
</p>

<p>
    更新日志: {update_log}
</p>
"""
        self.tools_list = TOOLS_LIST
        print(f"已读取到 {len(TOOLS_LIST)} 个红队工具项目")
        self.tools_info_dict = {}
        self.init_tools_info_by_dbinfo()
        self.get_tools_info()
        print("Github仓库监控类初始化完成")

    def init_tools_info_by_dbinfo(self):
        """通过数据库信息初始化红队工具信息字典"""
        if get_atk_tools_info() == []:
            print("数据库中没有红队工具信息")
        else:
            # 按照每条数据的 tools_name 作为 key, 其余列属性与其对应的值形成字典作为 value
            for info in get_atk_tools_info():
                self.tools_info_dict[info.tools_name] = info.__dict__
            print(f"已通过数据库初始化红队工具信息字典, 共获取到 {len(self.tools_info_dict)} 个红队工具项目")

    def _update_dict_and_db_by_api_info(self, tools_name, pushed_at, tag_name):
        # 更新字典
        info = {
            "tools_name": tools_name,
            "pushed_at": pushed_at,
            "tag_name": tag_name,
        }
        self.tools_info_dict[tools_name] = info
        # 更新数据库
        update_atk_tools_info(tools_name, pushed_at, tag_name)

    def get_push_tools_update_info(self, repo_full_name: str) -> None:
        try:
            repo_api_url = f"https://api.github.com/repos/{repo_full_name}"
            tools_json = requests.get(repo_api_url, headers=GITHUB_HEADERS).json()
            # 工具名称(也即仓库名称)
            tools_name = tools_json["name"]
            # 获取最后一次 commit 的时间(保留到具体日期)
            pushed_at = tools_json["pushed_at"].split("T")[0]
            api_url = tools_json["url"]
            html_url = tools_json["html_url"]
            # 检查 release 更新情况
            try:
                release_json = requests.get(
                    f"{api_url}/releases", headers=GITHUB_HEADERS, timeout=10
                ).json()
                # 如果有 release, 则获取最新的 release 的 tag, 否则 tag_name 为 None
                tag_name = release_json[0]["tag_name"] if release_json else "None"
            except Exception as e:
                print(
                    f"获取 release: {api_url}/releases 信息失败, 错误信息: {e}, 响应内容: {release_json}"
                )
            # 如果获取到的信息(info)与从数据库中读取到的信息(self.tools_info_dict[tools_name])不一致则更新数据库与self.tools_info_dict并推送消息
            try:
                db_tools_info = self.tools_info_dict[tools_name]
                equal_tag_name = tag_name == db_tools_info["tag_name"]
                equal_pushed_at = pushed_at == db_tools_info["pushed_at"]
            except KeyError:
                # 如果数据库中没有该工具的信息则 equal_tag_name 与 equal_pushed_at 均为 False
                equal_tag_name = False
                equal_pushed_at = False
            # 如果没有更新则不予处理
            if not equal_pushed_at:
                try:
                    commits_json = requests.get(
                        f"{api_url}/commits", headers=GITHUB_HEADERS, timeout=10
                    ).json()
                    commit_message = commits_json[0]["commit"]["message"]
                    markdown = f"红队工具: {tools_name} 有新的 commit\r\n更新日志: {commit_message}\r\n[仓库地址]({html_url})"
                    post_message_to_WXWork(markdown)
                    atom_content_html_commit = self.atom_content_html_template_commit.format(
                        html_url=html_url, tools_name=tools_name, commit_message=commit_message
                    )
                    add_atom_entry(
                        atom_file_path=ATOM_FILE_PATH,
                        entry_title=f"{tools_name} 有新的 commit",
                        entry_link=html_url,
                        entry_id=f"tag:github.com,2024:{html_url}/{datetime.now(timezone.utc).isoformat()}",
                        entry_summary=commit_message,
                        entry_content=atom_content_html_commit,
                    )
                except Exception as e:
                    print(
                        f"获取 commit: {api_url}/commits 信息失败, 错误信息: {e}, 响应内容: {commits_json}"
                    )
                # 更新字典与数据库
                self._update_dict_and_db_by_api_info(tools_name, pushed_at, tag_name)
            if not equal_tag_name:
                try:
                    release_json = requests.get(
                        f"{api_url}/releases",
                        headers=GITHUB_HEADERS,
                        timeout=10,
                    ).json()
                    # release_tag 对应的页面链接
                    download_url = (
                        release_json[0]["html_url"] if release_json else "None"
                    )
                    # release_tag 对应的更新日志
                    update_log = release_json[0]["body"] if release_json else "None"
                    if tag_name != "None":
                        markdown = f"工具: {tools_name} 有新的 release: {tag_name}\r\n更新日志: {update_log}\r\n[页面链接]({download_url})"
                    post_message_to_WXWork(markdown)
                    atom_content_html_release = self.atom_content_html_template_release.format(
                        download_url=download_url,
                        tools_name=tools_name,
                        tag_name=tag_name,
                        update_log=update_log,
                    )
                    add_atom_entry(
                        atom_file_path=ATOM_FILE_PATH,
                        entry_title=f"{tools_name} 有新的 release",
                        entry_link=download_url,
                        entry_id=f"tag:github.com,2024:{download_url}/{datetime.now(timezone.utc).isoformat()}",
                        entry_summary=update_log,
                        entry_content=atom_content_html_release,
                    )
                except Exception as e:
                    print(
                        f"获取 release: {api_url}/releases 信息失败, 错误信息: {e}, 响应内容: {release_json}"
                    )
                # 更新字典与数据库
                self._update_dict_and_db_by_api_info(tools_name, pushed_at, tag_name)
        except Exception as e:
            print(f"获取 仓库: {repo_api_url} 信息失败, 错误信息: {e}, 响应内容: {tools_json}")

    def get_tools_info(self):
        """获取所有工具最后一次 commit 的时间以及最新的 release 的 tag
        并更新数据库与推送信息
        """
        print("Github 红队工具仓库信息监控中...")
        # 计数器
        for count, repo_full_name in enumerate(self.tools_list, start=1):
            self.get_push_tools_update_info(repo_full_name)
            print(f"当前进度: {count}/{len(self.tools_list)}", end="\r")
        print("通过 Github API 获取并更新红队工具信息完成")

    def weekly_report(self):
        """本周仓库更新情况报告汇总"""
        pass
