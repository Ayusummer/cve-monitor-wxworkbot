"""
数据库相关逻辑
"""

import sys

from sqlalchemy import exc
from sqlalchemy import (
    create_engine,
    Column,
    Integer,
    String,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import or_
import datetime

Base = declarative_base()
engine = create_engine("sqlite:///cmdb.db", echo=True)
Session = sessionmaker(bind=engine)
session = Session()


# 定义 cve_mnitor_MS 表结构
class CVE_Monitor_MS(Base):
    __tablename__ = "cve_monitor_ms"
    cve_title = Column(String(255), nullable=False)
    cve_number = Column(String(255), primary_key=True, nullable=False)
    release_date = Column(String(255), nullable=False)
    mitre_url = Column(String(255), nullable=False)
    tag = Column(String(255), nullable=False)

    def __repr__(self):
        return f"<CMDB MSCVE {self.cve_title}>"


# 定义 cve_mnitor 表结构
class CVE_Monitor_Github(Base):
    __tablename__ = "cve_monitor_github"
    id = Column(Integer, primary_key=True, autoincrement=True)
    cve_name = Column(String(255), nullable=False)
    pushed_at = Column(String(255), nullable=False)
    cve_url = Column(String(255), nullable=False)

    def __repr__(self):
        return f"<CMDB {self.cve_name}>"


# 定义 redteam_tools_monitor 表结构
class Redteam_Tools_Monitor(Base):
    __tablename__ = "redteam_tools_monitor_github"
    id = Column(Integer, primary_key=True, autoincrement=True)
    tools_name = Column(String(255), nullable=False)
    pushed_at = Column(String(255), nullable=False)
    tag_name = Column(String(255), nullable=False)

    def __repr__(self):
        return f"<CMDB {self.tools_name}>"


# 定义 user_monitor 表结构
class User_Monitor(Base):
    __tablename__ = "user_monitor_github"
    id = Column(Integer, primary_key=True, autoincrement=True)
    repo_name = Column(String(255), nullable=False)

    def __repr__(self):
        return f"<CMDB {self.repo_name}>"


def add_cve_MS_info(cve_title, cve_number, release_date, tag, mitre_url):
    """添加MS披露的CVE相关信息"""
    try:
        new_cve_MS = CVE_Monitor_MS(
            release_date=release_date,
            cve_number=cve_number,
            cve_title=cve_title,
            mitre_url=mitre_url,
            tag=tag,
        )
        session.add(new_cve_MS)
        session.commit()
        print(
            f"添加漏洞信息成功, 漏洞名称: {cve_title}, 漏洞编号：{cve_number}, 发布时间: {release_date}, 标签: {tag}, 相关链接：{mitre_url}"
        )
        return 1
    except exc.IntegrityError:
        print("主键重复,已更新完毕")
        session.rollback()
        return 0
    except Exception as e:
        print(f"添加漏洞信息失败, 错误信息: {e}")
        session.rollback()
        sys.exit(0)


def get_atk_tools_info():
    """获取红队工具信息(用于初始化红队信息类的数据"""
    try:
        return session.query(Redteam_Tools_Monitor).all()
    except Exception as e:
        print(f"获取红队工具信息失败, 错误信息: {e}")


def update_atk_tools_info(tools_name, pushed_at, tag_name):
    """更新红队工具信息"""
    try:
        # 使用新的数据覆盖旧的数据(如果无法查询到数据, 则添加新的数据)
        if (
            session.query(Redteam_Tools_Monitor)
            .filter_by(tools_name=tools_name)
            .first()
        ):
            session.query(Redteam_Tools_Monitor).filter_by(
                tools_name=tools_name
            ).update(
                {
                    "pushed_at": pushed_at,
                    "tag_name": tag_name,
                }
            )
        else:
            new_atk_tools = Redteam_Tools_Monitor(
                tools_name=tools_name, pushed_at=pushed_at, tag_name=tag_name
            )
            session.add(new_atk_tools)
        session.commit()
        print(
            f"添加红队工具信息成功, 工具名称: {tools_name}, 发布时间: {pushed_at}, 标签: {tag_name}"
        )
    except Exception as e:
        print(f"添加红队工具信息失败, 错误信息: {e}")


def get_users_repos_info():
    """获取用户监控的仓库信息(用于初始化用户监控类的数据"""
    try:
        return session.query(User_Monitor).all()
    except Exception as e:
        print(f"获取用户监控的仓库信息失败, 错误信息: {e}")


def add_users_repos_info(repo_name):
    """添加用户监控的仓库信息"""
    try:
        new_users_repos = User_Monitor(repo_name=repo_name)
        session.add(new_users_repos)
        session.commit()
        print(f"添加用户监控的仓库信息成功, 仓库名称: {repo_name}")
    except Exception as e:
        print(f"添加用户监控的仓库信息失败, 错误信息: {e}")


def get_2day_cve_info():
    """获取当日和昨日的 cve 信息(用于初始化 cve 类的数据"""
    today_date = datetime.datetime.now().strftime("%Y-%m-%d")
    yesterday_date = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime(
        "%Y-%m-%d"
    )
    try:
        return (
            session.query(CVE_Monitor_Github)
            .filter(
                or_(
                    CVE_Monitor_Github.pushed_at == today_date,
                    CVE_Monitor_Github.pushed_at == yesterday_date,
                )
            )
            .all()
        )
    except Exception as e:
        print(f"获取当日和昨日的 cve 信息失败, 错误信息: {e}")


def add_2day_cve_info(cve_name, pushed_at, cve_url):
    """添加当日或昨日 cve 信息"""
    try:
        new_today_cve = CVE_Monitor_Github(
            cve_name=cve_name, pushed_at=pushed_at, cve_url=cve_url
        )
        session.add(new_today_cve)
        session.commit()
        print(
            f"添加当/昨日 cve 信息成功, cve 名称: {cve_name}, github仓库发布时间: {pushed_at}, cve 链接: {cve_url}"
        )
    except Exception as e:
        print(f"添加当/昨日 cve 信息失败, 错误信息: {e}")
