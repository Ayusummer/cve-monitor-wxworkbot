"""
Github 关注用户仓库变动相关逻辑
"""

import rtoml
from pathlib import Path
import requests
from modules.cmdb import get_users_repos_info, add_users_repos_info
from modules.info_push import post_message_to_WXWork
from modules.atom_tool import add_atom_entry

# 读取配置项信息
CONFIG = rtoml.load(Path(__file__).parent / "../config.toml")
GITHUB_TOKEN = CONFIG["github_token"]
USER_LIST = CONFIG["user_list"]
ATOM_FILE_PATH = Path(__file__).parent / f'../{CONFIG["atom_file_path"]}'

GITHUB_HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
}


class FollowedUsers:
    """Github 关注用户类, 用于获取用户仓库变动信息"""

    def __init__(self) -> None:
        print("Github 关注用户类初始化中...")
        self.atom_content_html_template = """<p>
  {user} 新建了仓库
  <a href="{repo_link}">{repo_name}</a>
</p>

<p>
  {repo_description}
</p>
"""
        self.users_repos = {}
        self.init_users_repos_by_db()
        self.get_users_repo()
        print("Github 关注用户类初始化完成")

    def init_users_repos_by_db(self) -> None:
        """从数据库中初始化用户仓库信息"""
        users_repos_info_db = get_users_repos_info()
        if users_repos_info_db == []:
            print("数据库中没有用户仓库信息")
        else:
            # 将每条数据的 repo_name 按照 / 分割为用户名与仓库形成字典
            for repo_full_name in users_repos_info_db:
                repo_full_name = repo_full_name.__dict__["repo_name"]
                username, reponame = repo_full_name.split("/")
                self.users_repos.setdefault(username, []).append(reponame)
            print(
                f"通过数据库初始化用户仓库信息成功, 共读取到 {len(users_repos_info_db)} 条数据"
            )

    def get_users_repo(self) -> None:
        """获取用户仓库列表"""
        print("Github 用户仓库信息监控中...")
        # 计数器
        count = 0
        for user in USER_LIST:
            # 按照更新时间倒序
            api = f"https://api.github.com/users/{user}/repos?sort=updated&order=desc"
            # api = f"https://api.github.com/users/{user}/repos"
            try:
                repos_json = requests.get(
                    api, headers=GITHUB_HEADERS, timeout=10
                ).json()
                for repo_json in repos_json:
                    repo_full_name = repo_json["full_name"]
                    username, reponame = repo_full_name.split("/")
                    try:
                        repos = self.users_repos[f"{user}"]
                    except KeyError:
                        # 用户不存在, 则仓库为空列表
                        print(f"数据库中没有用户 {user} 信息, 故将其仓库列表置为空列表")
                        repos = []
                    if reponame not in repos:
                        repo_url = repo_json["html_url"]
                        repo_description = (
                            repo_json["description"] or "作者未填写描述信息"
                        )
                        markdown = f"{user} 新建了仓库 {reponame}\r\n仓库描述: {repo_description}\r\n[仓库地址]({repo_url})"
                        post_message_to_WXWork(markdown)
                        atom_html_content = self.atom_content_html_template.format(
                            user=user,
                            repo_link=repo_url,
                            repo_name=reponame,
                            repo_description=repo_description,
                        )
                        add_atom_entry(
                            atom_file_path=ATOM_FILE_PATH,
                            entry_title=f"{user} 新建了仓库 {reponame}",
                            entry_link=repo_url,
                            entry_id=f"tag:github.com,2024:{repo_url}",
                            entry_summary=repo_description,
                            entry_author_name=user,
                            entry_content=atom_html_content,
                        )
                        self.users_repos.setdefault(username, []).append(reponame)
                        add_users_repos_info(repo_full_name)
                count += 1
                print(f"当前进度: {count}/{len(USER_LIST)}", end="\r")
            except Exception as e:
                print(
                    f"获取用户 https://api.github.com/users/{user}/repos 仓库列表失败, 错误信息: {e}"
                )
        print("本轮 Github 用户仓库信息监控与推送完成")
