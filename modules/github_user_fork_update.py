# 获取用户所有forks项目的上游仓库全名

import requests

def get_github_headers(access_token):
    """构造GitHub API请求所需的头信息"""
    return {
        "Authorization": f"token {access_token}",
        "Accept": "application/vnd.github.v3+json"
    }

def get_user_repositories(username, access_token):
    """获取用户的所有仓库记录，包括公开和私有仓库"""
    url = f"https://api.github.com/user/repos"
    headers = get_github_headers(access_token)
    params = {"visibility": "all"}
    repositories = []

    while url:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            repositories.extend(response.json())
            url = response.links.get('next', {}).get('url')
        else:
            response.raise_for_status()
            break

    return repositories

def get_parent_repository(repo, access_token):
    """获取仓库的来源信息"""
    url = repo['url']
    headers = get_github_headers(access_token)

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get('parent')

    return None

def get_user_fork_update_main(username, access_token):

    try:
        repositories = get_user_repositories(username, access_token)
        
        parent_repos = []
        if repositories:
            for repo in repositories:
                if not repo['private']:
                    if repo['fork']:
                        parent_repo = get_parent_repository(repo, access_token)
                        if parent_repo:
                            parent_repos.append(parent_repo['full_name'])
            # 打印星标仓库数量
            print(f"Forks数量: {len(parent_repos)}")
            return parent_repos

        else:
            print("没有找到任何仓库记录。")
            return
    except requests.exceptions.RequestException as e:
        print(f"发生错误：{e}")
        return

if __name__ == "__main__":
    # 输入GitHub用户名和访问令牌
    username = input("请输入GitHub用户名：")
    access_token = input("请输入GitHub访问令牌：")
    get_user_fork_update_main(username, access_token)
