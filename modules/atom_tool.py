# 用于处理 atom 订阅的工具模块
import xml.etree.ElementTree as ET
from datetime import datetime, timezone
from pathlib import Path


def is_atom_feed_valid(file_path):
    """检查 Atom 文件是否有效"""
    try:
        # 解析 Atom 文件
        tree = ET.parse(file_path)
        root = tree.getroot()

        # 检查根元素是否为 Atom 的 feed
        if root.tag != "{http://www.w3.org/2005/Atom}feed":
            return False

        # 检查是否包含必要的子元素，例如 title、link、updated 等
        required_elements = ["title", "link", "updated"]
        for element_name in required_elements:
            if root.find(f".//{element_name}") is None:
                return False

        # 检查是否包含 entry 元素，且每个 entry 元素都包含必要的子元素
        for entry in root.findall(".//{http://www.w3.org/2005/Atom}entry"):
            required_entry_elements = ["title", "link", "id", "updated", "summary"]
            for entry_element_name in required_entry_elements:
                if entry.find(f".//{entry_element_name}") is None:
                    return False

        # 如果所有检查通过，则返回 True
        return True
    except ET.ParseError:
        return False


def generate_atom_file_template(atom_file_path: Path) -> None:
    """生成 Atom 文件模板"""
    # 注册命名空间，将前缀设置为空字符串
    ET.register_namespace("", "http://www.w3.org/2005/Atom")
    # 创建 Atom 文档的根元素
    feed = ET.Element("feed", xmlns="http://www.w3.org/2005/Atom")
    # 添加 id
    id = ET.SubElement(feed, "id")
    id.text = "tag:github.com,2024:https://github.com/Ayusummer/cve-monitor-wxworkbot"
    # 添加 title 元素
    title = ET.SubElement(feed, "title")
    title.text = "CVE monitor feed"
    # 添加 link 元素
    link = ET.SubElement(
        feed,
        "link",
        {
            # "href": "https://github.com/Ayusummer/cve-monitor-wxworkbot",
            "href": "http://82.156.29.33:9224/releases",
            "rel": "self",
        },
    )
    # 添加 updated 元素
    updated = ET.SubElement(feed, "updated")
    updated.text = f"{datetime.now(timezone.utc).isoformat()}"

    # 将 Atom 文档保存为 XML 文件
    tree = ET.ElementTree(feed)
    tree.write(
        atom_file_path,
        encoding="utf-8",
        xml_declaration=True,
    )


def add_atom_entry(
    atom_file_path: Path,
    entry_title: str,
    entry_link: str,
    entry_id: str,
    entry_summary: str,
    entry_author_name: str = "Ayusummer",
    entry_content: str = "test content",
) -> None:
    """向 Atom 文件中添加一个 entry 元素"""
    # 解析 Atom 文件
    tree = ET.parse(atom_file_path)
    root = tree.getroot()

    # 创建 entry 元素
    entry = ET.Element("entry")

    # 添加 link 元素
    link = ET.SubElement(entry, "link", {"href": entry_link})

    # 添加 id 元素
    id = ET.SubElement(entry, "id")
    id.text = entry_id

    # 添加 updated 元素
    updated = ET.SubElement(entry, "updated")
    updated.text = f"{datetime.now(timezone.utc).isoformat()}"

    # 添加 summary 元素
    summary = ET.SubElement(entry, "summary")
    summary.text = entry_summary

    # 添加 title 元素
    title = ET.SubElement(entry, "title")
    title.text = entry_title

    # 添加 content 元素(html)
    content = ET.SubElement(entry, "content", {"type": "html"})
    content.text = entry_content
    print(f"entry_content: {entry_content}, content.text: {content.text}")

    # 添加 author 元素
    author = ET.SubElement(entry, "author")
    author_name_sub = ET.SubElement(author, "name")
    author_name_sub.text = entry_author_name

    # 将 entry 元素添加到 Atom 文档
    root.insert(4, entry)

    # 将 Atom 文档保存为 XML 文件
    tree.write(atom_file_path, encoding="utf-8", xml_declaration=True)


def InitAtomFile(atom_file_path: Path) -> None:
    """初始化 atom 文件
    若 atom_file_path 不存在则按照atom规范创建一个新的文件
    若 atom_file_path 存在则检查文件是否有效，若无效则按照atom规范创建一个新的文件
    """
    if not atom_file_path.exists() or not is_atom_feed_valid(atom_file_path):
        generate_atom_file_template(atom_file_path)
