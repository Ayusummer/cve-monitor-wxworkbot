"""
Github CVE 新仓库监控
"""
import rtoml
from pathlib import Path
import requests
from modules.cmdb import get_2day_cve_info, add_2day_cve_info
from modules.info_push import post_message_to_WXWork
import datetime


# 读取配置项信息
CONFIG = rtoml.load(Path(__file__).parent / "../config.toml")
GITHUB_TOKEN: str = CONFIG["github_token"]
USER_LIST: list = CONFIG["user_list"]
# Github CVE 监控中高频率更新漏洞仓库的用户或组织列表
CVE_HIGH_FREQ_USER_ORG_LIST: list = CONFIG["cve_high_freq_user_org_list"]

GITHUB_HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
}


class CVEGithub:
    """Github CVE 新仓库监控类"""

    def __init__(self) -> None:
        print("Github CVE 新仓库监控类初始化中...")
        self.two_day_cve_info = {}
        self.cve_high_freq_user_org_repo_push_info_list = []
        self.init_2day_cve_info_by_db()
        self.get_2day_cve_info()
        print("Github CVE 新仓库监控类初始化完成")

    def init_2day_cve_info_by_db(self) -> None:
        """从数据库中初始化今日与昨日的 CVE 信息"""
        two_day_cve_info_db = get_2day_cve_info()
        if two_day_cve_info_db == []:
            print("数据库中没有 CVE 信息")
        else:
            for two_day_cve_info in two_day_cve_info_db:
                self.two_day_cve_info[
                    two_day_cve_info.__dict__["cve_name"]
                ] = two_day_cve_info.__dict__
            print(f"通过数据库初始化 CVE 信息成功, 共获取到 {len(self.two_day_cve_info)} 条数据")

    def get_cve_info_by_date(self, today_date: datetime.date) -> None:
        """通过 Github API 获取指定日期的 CVE 信息"""
        year = today_date.year
        api = f"https://api.github.com/search/repositories?q=CVE-{year}&sort=updated&order=desc"
        cves_json = requests.get(api, headers=GITHUB_HEADERS, timeout=10).json()
        # 取前 20 条数据
        cves_json = cves_json["items"][:20]
        for cve_json in cves_json:
            cve_repo_url = cve_json["html_url"]
            cve_repo_full_name = cve_json["full_name"]
            cve_repo_create_date = cve_json["created_at"].split("T")[0]
            if cve_repo_create_date == str(
                today_date
            ) and cve_repo_full_name not in list(self.two_day_cve_info.keys()):
                cve_repo_owner = cve_json["owner"]["login"]
                cve_repo_description = cve_json["description"]
                if cve_repo_owner in CVE_HIGH_FREQ_USER_ORG_LIST:
                    self.cve_high_freq_user_org_repo_push_info_list.append(
                        {
                            "full_name": cve_repo_full_name,
                            "url": cve_repo_url,
                            "create_date": cve_repo_create_date,
                            "description": cve_repo_description,
                        }
                    )
                else:
                    markdown = f"监测到新的 CVE 仓库: [{cve_repo_full_name}]({cve_repo_url})\r\n仓库创建日期: {cve_repo_create_date}\r\n仓库描述: {cve_repo_description}"
                    post_message_to_WXWork(markdown)
                    self.two_day_cve_info[cve_repo_full_name] = {
                        "name": cve_repo_full_name,
                        "create_date": cve_repo_create_date,
                        "url": cve_repo_url,
                    }
                    add_2day_cve_info(
                        cve_repo_full_name, cve_repo_create_date, cve_repo_url
                    )

    def get_2day_cve_info(self) -> None:
        """通过 Github API 获取今日与昨日的 CVE 信息"""
        try:
            print("Github CVE 新仓库监控中...")
            origin_len = len(self.two_day_cve_info)
            today = datetime.date.today()
            yesterday = today - datetime.timedelta(days=1)
            self.get_cve_info_by_date(today)
            self.get_cve_info_by_date(yesterday)
            print(f"获取 CVE 信息成功, 今日新增 {len(self.two_day_cve_info) - origin_len} 条数据")
            print("本轮 Github CVE 新仓库监控与推送完成")
        except Exception as e:
            print(f"获取当前年份失败, 错误信息: {e}")
            return

    def push_and_clear_high_freq_user_org_repo_push_info_list(self) -> None:
        """推送高频用户或组织的 CVE 仓库信息并清空临时存储列表
        此函数目前是有问题没处理的, 似乎是因为推送的 markdown 文本太长了
        企微单次推送的 markdown 文本长度有限制, 需要考虑一下怎么切分
        """
        print("进入推送高频用户或组织的 CVE 仓库信息并清空临时存储列表模块")
        if self.cve_high_freq_user_org_repo_push_info_list != []:
            markdown = "监测到高频用户或组织的 CVE 仓库信息:\r\n"
            for (
                cve_high_freq_user_org_repo_push_info
            ) in self.cve_high_freq_user_org_repo_push_info_list:
                markdown += f"[{cve_high_freq_user_org_repo_push_info['full_name']}]({cve_high_freq_user_org_repo_push_info['url']})\r\n仓库描述: {cve_high_freq_user_org_repo_push_info['description']}\r\n\r\n"
                add_2day_cve_info(
                    cve_high_freq_user_org_repo_push_info["full_name"],
                    cve_high_freq_user_org_repo_push_info["create_date"],
                    cve_high_freq_user_org_repo_push_info["url"],
                )
            print("准备推送高频用户或组织的 CVE 仓库信息")
            post_message_to_WXWork(markdown)
            print("已推送高频用户或组织的 CVE 仓库信息")
            self.cve_high_freq_user_org_repo_push_info_list = []
